#include <iostream>
#include <vector>

/*Each new term in the Fibonacci sequence is
generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms
will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci
sequence whose values do not exceed four million,
find the sum of the even-valued terms.*/


// this function will generate the fibonacci sequence
// with STARTING TERMS of {1,2} (you could of course start with 0,1, or even 1,1, but for the purposes
// of this problem we'll start with {1,2})

// return the vector itself or a reference to it?
std::vector<int> generateFibsBelowValueLimit(int n) {
    // require an error check; what if a value < 2 is passed, or a negative value?
    // what behavior do we want this function to do if that happens?
    int prior_index = 0;
    int current_index = 1;
    std::vector<int> cache = { 1,2 };
    int next = cache[prior_index] + cache[current_index];
    while (next <= n)
    {
        cache.push_back(next);
        prior_index++;
        current_index++;
        next = cache[prior_index] + cache[current_index];
    }
    return cache;
}

void printTest(const std::vector<int>& n) {
    for (int i : n)
    {
        std::cout << i << " ";
    }
    return;
}

int sumEvenFibs(const std::vector<int>& sequence) {
    int sum = 0;
    for (int i : sequence)
    {
        if (i % 2 == 0)
        {
            sum += i;
        }
    }
    return sum;
}

int main()
{
    std::vector<int> model = generateFibsBelowValueLimit(4000000);

    printTest(model);
    std::cout << "\nThe sum of even terms of the Fibonacci sequence generated to the specified term limit is: ";
    std::cout << "\n" << sumEvenFibs(model);

    return 0;
}